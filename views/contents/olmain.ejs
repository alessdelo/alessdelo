

<p class="lead">Openlayers - Markers from MongoDB and Quaries</p>
<hr class="my-4">

<% strMyVar = JSON.stringify(myVar, null, 4); %>
<%= strMyVar %>
<% var passEjs = strMyVar; %>

<?php include "/static/test.php"; ?>

<script>
var getPassEjs = <%- passEjs %>;

 // Fare il print() di un oggetto
            function printObject(o) {
                var out = '';
                for (var p in o) {
                  out += p + ': ' + o[p] + '\n';
                }
                alert(out);
            }

</script>

<script type="text/javascript" src="/static/test.js"></script>


<form action="/olmain" method="post" class="my-2 my-lg-0">	 	     
	<div class="form-row">
     		<button id="addItem" class="btn btn-outline-success my-2 my-sm-0" >Add</button>   
     	</div>	
  </form>   
  
  <hr class="my-4">
  
    <style>
      .map {
       height: 400px;
       width: 100%;
      }
   </style>
  
  <h2>OpenLayers - Multipoint Layer </h2>
  <div id="map2" class="map"></div> 
  <div style="display: none;">
      <!-- Popup -->
      <div id="popup" title="Pop-Up"></div>
   </div>

    <script>
      
    
  // -------------------------------------
	// PLACES
	var roma = ol.proj.fromLonLat([12.529999, 41.900000]);
	// var vatican = ol.proj.fromLonLat([41.9029468, 12.4544835]);
// -------------------------------------     

      var markerStyle =   new ol.style.Style({
        image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
          color: '#ffcc00',
	  opacity: 0.6,
	  scale: 0.6,
          crossOrigin: 'anonymous',
          src:'/static/icon360.png'
        }))
      });


var iconStyle = new ol.style.Style({
                                         image: new ol.style.Icon(({
                                          anchor: [0.5, 1.0],
                                          anchorXUnits: 'fraction',
                                          anchorYUnits: 'fraction',
                                          src: "http://maps.google.com/mapfiles/ms/icons/grey.png"
                                          }))
					  
                                 }); 
				 
				 
				 
				 
	 function styleFunction(url, rate){
		 var iconStyle = new ol.style.Style({
						 image: new ol.style.Icon(({
							  anchor: [0.5, 1.0],
							  anchorXUnits: 'fraction',
							  anchorYUnits: 'fraction',
							  src: url
						  })),
						  					  
						  text: new ol.style.Text({
							text: rate,
							scale: 1.3,
							offsetY: -20,
								fill: new ol.style.Fill({
							 	 color: '#000000'
								})
							}),	
						stroke: new ol.style.Stroke({  	
							color: '#FFFF99',
							  width: 3.5
							})
                                 }); 
				 
			return iconStyle;	 
				 					 
	 } // end function 
	 
	 	
	 
		// takes the map style passed from index via ejs		
	// var dataArray =  getPassEjs[0];
	 

var dataArray = {
		 0:{ "loc": { "type": "Point", "coordinates": [ 41.90217064,12.45336004 ] }, "_id": "5aee1e0d3586f100043d9109", "name": "Cuppolone", "rate": 6, "time": "2018-05-05T21:11:41.148Z", "__v": 0 },
		 1:{ "loc": { "type": "Point", "coordinates": [ 41.903080, 12.466349 ] }, "_id": "5aee1f275ec9a9000461b287", "name": "Castel S.Angelo", "rate": 1, "time": "2018-05-05T21:16:23.362Z", "__v": 0 },
		 2:{ "loc": { "type": "Point", "coordinates": [ 41.881856, 12.514087 ] }, "_id": "5af12a77d85bd60004984669", "name": "Re di Roma", "rate": 7, "time": "2018-05-08T04:41:27.706Z", "__v": 0 },
		 3:{ "loc": { "type": "Point", "coordinates": [ 41.914027, 12.414731 ] }, "_id": "5af1fee86c75f00004a43fad", "name": "Alta", "rate": 5, "time": "2018-05-08T19:47:52.750Z", "__v": 0 },
		 4:{ "loc": { "type": "Point", "coordinates": [ 41.876464, 12.480852 ] }, "_id": "5afc9d6a802a540004dabc82", "name": "Piramide", "rate": 2, "time": "2018-05-16T21:06:50.852Z", "__v": 0 }
		}; 
		
		
		
		


var multiIconFeatures = [];

var i = 0;
	 	
		
		
		for(var theKey in dataArray) { 
		
		
		
	                if(dataArray.hasOwnProperty(theKey)) {
                      
                             
				
	                    var theVal = dataArray[theKey];
			    
			    
			    
			    // test
			    //  alert(JSON.stringify(theVal));
			     
			    
			     
			    //   $("#theArray").append("<p>aaaaa</p><br>"); 
			    
			     
			    
	                       if (typeof theVal.loc.coordinates !== 'undefined' || theVal.loc.coordinates.length > 0 || theVal.loc.coordinates !== []) {
			       
			       
			       
				        var theX = theVal.loc.coordinates[0];
					 var theY = theVal.loc.coordinates[1];
					 
					
					 
					  if (typeof theVal.name !== 'undefined'){
					 
						 var theName = theVal.name;
					 
					 } else {
					  	var theName = "no name";
					 
					 } 
					 
					 					 
					 					         
       					
					
					
					  if (typeof theVal.time !== 'undefined'){
					 
						// var theTime = dateFromTimestamp(theVal.time);
					 
					 } else {
					  	// var theTime = "no time";
					 
					 }
                               
                               		
					
					
													       
					 
					   if (typeof theVal.rate !== 'undefined'){
					 
						var myRate = theVal.rate; 
						var theLabel = JSON.stringify(theVal.rate);
					 
					 } else {
					  	var myRate = "no rate"; 
						var theLabel = "0";
					 
					 } 
					 
	       var icon = ""; 
	       var x =parseInt(theLabel);
        switch (true) {
            case (x < 1):
                icon = "grey";
                break;
            case (x < 3):
                icon = "green";
                break;
            case (x < 6):
                icon = "yellow";
                break;
		case (x < 9):
                icon = "red";
                break;		
            default:
                icon = "grey";
                break;
        }				 

      icon = "http://maps.google.com/mapfiles/ms/icons/" + icon + ".png"; 
      
      // iconStyle[image][src] = icon;
      
    // var testString = "<p>"+ theName + " - " + theX + " - " + theY + " - " + theTime + " - " + myRate + " - " +  "</p>";
      var testString = "<p>" + theName + " - " +  theX + " - " + theY + " - " + myRate +  "</p><br>";
   //    alert(testString);
      
      
   
     
     				
      
      				
				// conversion of coordinates system (X and Y are inverted)
			     //  var theCoords = ol.proj.fromLonLat([theY, theX]);
			     
			    var theCoords = [theY, theX];
			     
			     // var theCoords = [theX, theY];
                              
			      multiIconFeatures[i] = new ol.Feature({
                                         geometry: new ol.geom.Point(theCoords),
                                          name: theName,
                                          rate: myRate
                              });
			      			                                   			   
				
				// printObject(multiIconFeatures[i]); 
				
				 var iconStyle = styleFunction(icon, theLabel);
				 
				 
				
                              
                              multiIconFeatures[i].setStyle(iconStyle); 
			      
			      
			      
			         i++;
		      		 // alert(i);
		
				 										 					 					 					 
				  } // fine if 2	 
				
				
	                      
 	               } // fine if 1  		   		       
		      
		    
		      
	            } // fine for
		    		   		    



	  // alert(multiIconFeatures); 
	  	 	printObject(multiIconFeatures); 
	
	// ----------------------------------------- 
			
	 
	 var multiVectorSource = new ol.source.Vector({
        features: multiIconFeatures
      });
      var multiVectorLayer = new ol.layer.Vector({
        source: multiVectorSource
      }); 
      
   
       var map2BaseLayer = new ol.layer.Tile({
                  source: new ol.source.OSM()
                }); 
		
		
		
		var olMapLayers = [map2BaseLayer, multiVectorLayer];
		// var olMapLayers = [map2BaseLayer];
		

var map2 = new ol.Map({
              target: 'map2',
	      layers: olMapLayers,             
              view: new ol.View({
			projection: 'EPSG:4326',
		  	center: [12.45, 41.90],
		  	zoom: 15
		})             
        }); // end var map2
	
	// popUp('popup2', map2);   
	
// ---------------------------------------------------------------------	
/*
// SELECT

// select interaction working on "click"
      var select = new Select({        
	layers: [multiVectorLayer],
	style: [color: black, width:4]
      });
      
      map.addInteraction(select);
      select.on('select', function(e) {
            alert('Selected!');
      });
      
       //   var selectedFeatures = select.getFeatures();
     // selectedFeatures.on('select', function(e) {
         //   alert('Selected!');
    //  });
   */   
      
// ---------------------------------------------------------------------

      // Popup showing the position the user clicked
      var popup = new Overlay({
        element: document.getElementById('popup')
      });
      map2.addOverlay(popup);

	map2.on('click', function(evt) {
		var element = popup.getElement();
		var coordinate = evt.coordinate;
		var hdms = toStringHDMS(toLonLat(coordinate));

		$(element).popover('destroy');
		popup.setPosition(coordinate);
		$(element).popover({
		  placement: 'top',
		  animation: false,
		  html: true,
		  content: '<p>The location you clicked was:</p><code>' + hdms + '</code>'
		});
		$(element).popover('show');
	      });

	
// var fpControl = new ol.Control.FeaturePopups();

/*
    fpControl.addLayer(multiVectorLayer, {
        templates: {
            single: "<h2>aaaa</h2>bbbbbb"
            // .name is attributes.name on features, and so on.
        }
    });
    map2.addControl(fpControl);
    
    */


/*
 map2.on('singleclick', function(evt) {
 	alert('map clicked');
      	// printObject(fpControl);
	}); 
	
	*/	
	
	
	    /*      
        // Add a click handler to the map to render the popup.
                         
      map2.on('singleclick', function(evt) {
      
      alert('map clicked');
      
    
        var coordinate = evt.coordinate;
        var hdms = toStringHDMS(toLonLat(coordinate));

        content.innerHTML = '<p>You clicked here:</p><code>' + hdms +
            '</code>';
        overlay.setPosition(coordinate);
	
	
      });		
*/
          
 
 /*
    
    //Add a selector control to the vectorLayer with popup functions
    var controls = {
      selector: new OpenLayers.Control.SelectFeature(multiVectorLayer, { onSelect: createPopup, onUnselect: destroyPopup })
    };

    function createPopup(feature) {
      feature.popup = new OpenLayers.Popup.FramedCloud("pop",
          feature.geometry.getBounds().getCenterLonLat(),
          null,
          '<div class="markerContent">'+'bla... bla...'+'</div>',
          null,
          true,
          function() { controls['selector'].unselectAll(); }
      );
      //feature.popup.closeOnMove = true;
      map.addPopup(feature.popup);
    }

    function destroyPopup(feature) {
      feature.popup.destroy();
      feature.popup = null;
    }
    
    map.addControl(controls['selector']);
    controls['selector'].activate();
      
*/
  
//-------------------------------------------------------------	
    </script>
    
  <hr class="my-4">
  <div id="theArray">@@@</div>

  <hr class="my-4">
  <h4>Inspired by...</h4>
  <a href="https://youtu.be/TvcDcfzNBII" target="_blank">Join in MongoDB (1)</a>
    <br> 
   <a href="http://openlayers.org/en/latest/examples/cluster.html" target="_blank">Openlayers Cluster</a>  
    <br>
     <a href="https://openlayers.org/en/v4.6.5/examples/data/dot.png" target="_blank">Openlayers Markers</a>  
    <br>
    
    
    
 
          
