<p class="lead">Create markers from MongoDB</p>
<hr class="my-4">

<% strMyVar = JSON.stringify(myVar, null, 4); %>
<%= strMyVar %>
<% var passEjs = strMyVar; %>

<script>
var getPassEjs = <%- passEjs %>;
/*
// verifica ricezione variabile ejs
if (typeof getPassEjs !== 'undefined') { //  || passEjs == "" 
	alert(getPassEjs[1]);
	alert( JSON.stringify(getPassEjs[1]));
	
} else {
	alert("??????");
}
*/

function randomStr(m) {
	var m = m || 9; s = '', r = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	for (var i=0; i < m; i++) { s += r.charAt(Math.floor(Math.random()*r.length)); }
	return s;
}

function fillCoords(length){
	var multip = Math.pow(10,length);
	var randnum = Math.floor(Math.random() * multip);
	return randnum;
}

function randomIntFromInterval(min,max,decimals)
{
  return Number((Math.random()*(max-min)+min).toFixed(decimals));
}

// Area limits (Roma):
// - top-left: 41.9999999, 12.3999999
// - bot-right: 41.7999999, 12.6599999
var coordX = randomIntFromInterval(41.8000000,41.9999999,7);
var coordY = randomIntFromInterval(12.3999999,12.6599999,7);

// retrieves date  from timestamp
// var timeStr = "2010-01-13T18:31:16Z";
function dateFromTimestamp(timeStr) {
	var date = new Date(timeStr);
	var day = date.getDate();
	var year = date.getFullYear();
	var month = date.getMonth()+1;
	var dateStr = day + "/"+ month + "/" + year;
	
	return dateStr;
	} 
	
	// random number 1-10	
	var theRate = Math.floor(Math.random() * 10)+1;


		
$(document).ready( function() {
	$( "input[name='coordx']" ).val(coordX);
	$( "input[name='coordy']" ).val(coordY);
	$( "input[name='rate']" ).val(theRate);
	
		
}); // fine document.ready


//-------------------------------------------------
// GOOGLE MAPS API
	// takes the map style passed from index via ejs		
	 var dataArray =  getPassEjs[0];
	alert(dataArray);
	

    function initMap() {
       var roma = {lat: 41.9000000, lng: 12.5299999};
       var map = new google.maps.Map(document.getElementById('map'), {
         zoom: 12,
         center: roma,
	 styles: getPassEjs[1]
	 	
	 		
	
       }); // fine var map
       
 
		
			 	
		for(var theKey in dataArray) { 
		
	                if(dataArray.hasOwnProperty(theKey)) {
				
	                    var theVal = dataArray[theKey];
			    
	                       if (typeof theVal.loc.coordinates !== 'undefined' || theVal.loc.coordinates.length > 0) {
			       
				        var theX = theVal.loc.coordinates[0];
					 var theY = theVal.loc.coordinates[1];
					  if (typeof theVal.name !== 'undefined'){
					 
						 var theName = theVal.name;
					 
					 } else {
					  	var theName = "no name";
					 
					 }
					
					
					  if (typeof theVal.time !== 'undefined'){
					 
						var theTime = dateFromTimestamp(theVal.time);
					 
					 } else {
					  	var theTime = "no time";
					 
					 }
					 
					   if (typeof theVal.rate !== 'undefined'){
					 
						var myRate = theVal.rate; 
						var theLabel = JSON.stringify(theVal.rate);
					 
					 } else {
					  	var myRate = "no rate"; 
						var theLabel = "0";
					 
					 }
					
					
	       var icon = ""; 
	       var x =parseInt(theLabel);
        switch (true) {
            case (x < 1):
                icon = "grey";
                break;
            case (x < 3):
                icon = "green";
                break;
            case (x < 6):
                icon = "yellow";
                break;
		case (x < 9):
                icon = "red";
                break;		
            default:
                icon = "grey";
                break;
        }
        icon = "http://maps.google.com/mapfiles/ms/icons/" + icon + ".png";				
					
					
					var infoContent = '<div>' +
								'<p>Name: ' + theName + '</p>' +
								'<p>Time: ' + theTime + '</p>' +
								'<p>Rate: ' + myRate + '</p>' +
								'</div>';
					
					
					
					// var theX = 41.9000000;
					// var theY = 12.5299999;
				
					 var marker = new google.maps.Marker({ 
						 position: {lat: theX, lng: theY},
						 label: theLabel,						
						 map: map,
						 animation: google.maps.Animation.DROP,
						 icon: new google.maps.MarkerImage(icon)
					 });  
					 
					 	attachMessage(marker, infoContent);									 					 					 
					 
				} // fine if 2	 
	                      
 	               } // fine if 1  
		   
		       
		       
	            } // fine for
		   	
             function attachMessage(marker, theMsg) {
		 
		        var infowindow = new google.maps.InfoWindow({
 		         content: theMsg
		        });
					
			marker.addListener('click', function() { 			
			//infowindow.close();
			if (typeof activeWindow !== 'undefined'){
			activeWindow.close(); 
				}
			
		          infowindow.open(marker.get('map'), marker);
			 
			 /*
			 //Close active window if exists 
			  if(activeWindow != null) { 
                       		// activeWindow.close(); 
				}
				
                   	 //Open new window 
                   	 infowindow.open(marker.get('map'), marker); 
                    	 //Store new window in global variable 
                 	   
			   */
			   activeWindow = infowindow; 
			  
		        }); 
	
		} // fine attachMessage()
       
       
     } // fine initMap

</script>

 <script>

// TAG EDITOR
// Create a "close" button and append it to each list item
var myNodelist = document.getElementsByTagName("LI");
var i;
for (i = 0; i < myNodelist.length; i++) {
  var span = document.createElement("SPAN");
  var txt = document.createTextNode("\u00D7");
  span.className = "close";
  span.appendChild(txt);
  myNodelist[i].appendChild(span);
}

// Click on a close button to hide the current list item
var close = document.getElementsByClassName("close");
var i;
for (i = 0; i < close.length; i++) {
  close[i].onclick = function() {
    var div = this.parentElement;
    div.style.display = "none";
  }
}

// Add a "checked" symbol when clicking on a list item
var list = document.querySelector('ul');
list.addEventListener('click', function(ev) {
  if (ev.target.tagName === 'LI') {
    ev.target.classList.toggle('checked');
  }
}, false);

// Create a new list item when clicking on the "Add" button
function newElement() {
  var li = document.createElement("li");
  var inputValue = document.getElementById("myInput").value;
  var t = document.createTextNode(inputValue);
  li.appendChild(t);
  if (inputValue === '') {
    alert("You must write something!");
  } else {
    document.getElementById("myUL").appendChild(li);
  }
  document.getElementById("myInput").value = "";

  var span = document.createElement("SPAN");
  var txt = document.createTextNode("\u00D7");
  span.className = "close";
  span.appendChild(txt);
  li.appendChild(span);

  for (i = 0; i < close.length; i++) {
    close[i].onclick = function() {
      var div = this.parentElement;
      div.style.display = "none";
    }
  }
}

 
 </script>

<p class="lead">Mongo points in Maps area</p>

<hr class="my-4">

<form action="/mapmongo3" method="post" class="form-inline my-2 my-lg-0">
     <input name="name" class="form-control mr-sm-2" placeholder="Point Name" aria-label="Name">
     <input name="rate" class="form-control mr-sm-2" aria-label="Rate"> 
     <input name="coordx" class="form-control mr-sm-2" aria-label="CoordX">
     <input name="coordy" class="form-control mr-sm-2" aria-label="CoordY"> 
     <button id="addItem" class="btn btn-outline-success my-2 my-sm-0" >Add</button>
     
     <div id="myDIV" class="header">
  <h2>My To Do List</h2>
  <input type="text" id="myInput" placeholder="Title...">
  <span onclick="newElement()" class="addBtn">Add</span>
</div>

<ul id="myUL">
  <li>Hit the gym</li>
  <li class="checked">Pay bills</li>
  <li>Meet George</li>
  <li>Buy eggs</li>
  <li>Read a book</li>
  <li>Organize office</li>
</ul>
     
     
</form>


<div id="testVar">TestVar...</div>

   <style>
      #map {
       height: 400px;
       width: 100%;
      }
   </style>
   <h3>My Google Maps Demo</h3>
   <div id="map"></div>
   
   

    <script async defer
   src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCwBHsazZiwOM_daIT60BctPGfQYWw8T38&callback=initMap">
   </script>
