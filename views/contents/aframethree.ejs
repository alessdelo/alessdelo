  <p class="lead">A-Frame import obj</p>
<hr class="my-4">

<% strMyVar = JSON.stringify(myVar, null, 4); %>
<%= strMyVar %>
<% var passEjs = strMyVar; %>

<script>
var getPassEjs = <%- passEjs %>;
</script>

<script type="text/javascript" src="/static/general.js"></script>
  
  <a-scene>
      <a-assets>
        <a-asset-item id="tree-obj" src="/static/three/threeTest1.obj"></a-asset-item>
        <a-asset-item id="tree-mtl" src="/static/three/threeTest1.mtl"></a-asset-item>
      </a-assets>
  
      <a-sky id="pano" src="/static/photosphere1.jpg" rotation="0 -60 0" radius="5000" color="#fff"></a-sky>
      
     <a-entity camera look-controls>
          <a-entity cursor="fuse: true; fuseTimeout: 500"
                position="0 0 -1"
                geometry="primitive: ring; radiusInner: 0.02; radiusOuter: 0.03"
                material="color: black; shader: flat">
                 <a-entity animation begin="click" easing="ease-in" attribute="scale" dur="150"
                   fill="forwards" from="0.1 0.1 0.1" to="1 1 1"></a-entity>
                <a-entity animation begin="cursor-fusing" easing="ease-in" attribute="scale" dur="1500"
                   fill="backwards" from="1 1 1" to="0.1 0.1 0.1"></a-entity>
          </a-entity>
    </a-entity>
    
 <a-entity >

 	 <a-entity obj-model="obj: #tree-obj; mtl: #tree-mtl" scale="0.04 0.04 0.04"  position="3 0 2" onclick="showData(this); rotEl(this);" ></a-entity>
  
  </a-entity>

 </a-scene>
 <script>
 
 // MATERIAL
			 var envMap = new THREE.TextureLoader().load( '/static/aframe/tour1/scene2.jpg' );
			  	envMap.mapping = THREE.EquirectangularReflectionMapping;
																						
			 var material1 = new THREE.MeshPhongMaterial( { envMap: envMap, overdraw: 0.5, color: 0xbfff00 } ); //  {color: 0x00ff00} 
			 // var material1 = new THREE.MeshBasicMaterial( {envMap: envMap, overdraw :: 0.5 } ); 
				 var matMetal2 = material1; 
			 	matMetal2.color.setHex( 0xffffff );
				
				
				
				var i = 0;	
				var matArr = [];
				var propArray = { 
							"0" : {"color" : "0xbfff00"},
							"1" : {"color" : "0x2aa340"},
							"2" : {"color" : "0xc2e34b"},
							"3" : {"color" : "0xe34bbd"},
							"4" : {"color" : "0x98a5d6"},
							"5" : {"color" : "0xe6a33e"},
							"6" : {"color" : "0x2b302b"},
							"7" : {"color" : "0xf7f7e1"}
							
							}; 
							
							/*
			 
			 		for(var propKey in propArray) { 
						                
						var propVal = propArray[propKey]; 
						var matArr[i] = new THREE.MeshPhongMaterial( { envMap: envMap, overdraw: 0.5, color: propVal.color } );
						i++;
						}
						
						*/
						
						
						
						
			 
			 
			 
 
function showData(data) { 
	/* 
  printObject(data); 
  printObject(data.object3D); 
  printObject(data.object3DMap.mesh); 
  printObject(data.object3DMap.mesh.children); 
  
  
  printObject(data.object3DMap.mesh.children[0].material);
  */ 
  
  /* 
  printObject(data.object3DMap.mesh.children[0]); 
  printObject(data.object3DMap.mesh.children[1]); 
  printObject(data.object3DMap.mesh.children[2]); 
  printObject(data.object3DMap.mesh.children[3]); 
  printObject(data.object3DMap.mesh.children[4]); 
  printObject(data.object3DMap.mesh.children[5]); 
  printObject(data.object3DMap.mesh.children[6]); 
  printObject(data.object3DMap.mesh.children[7]); 
  printObject(data.object3DMap.mesh.children[8]); 
  printObject(data.object3DMap.mesh.children[9]); 
  printObject(data.object3DMap.mesh.children[10]); 
  printObject(data.object3DMap.mesh.children[11]); 
  printObject(data.object3DMap.mesh.children[12]); 
  printObject(data.object3DMap.mesh.children[13]); 
  printObject(data.object3DMap.mesh.children[14]); 
  printObject(data.object3DMap.mesh.children[15]); 
  printObject(data.object3DMap.mesh.children[16]); 
  */
  
  
  
//  data.object3DMap.mesh.children[0].material = material1; 
  
  var theChildren = data.object3DMap.mesh.children;
  
  
  
  for (j = 0; j < theChildren.length; j++) {
  switch(theChildren[j].indexOf( true )) {
    case "main":
        theChildren[j].material = matArr[0];
        break;
    case "decor":
        theChildren[j].material = matArr[1];
        break;
    default:
        theChildren[j].material = matArr[2];
	}
  
}
  
  /*
  
   var angle = 0;
  setTimeout(function (){ 
  	if(angle < 360) {
			angle++;
		} else { 
			angle = 0
		}
  	
            data.object3D.rotation.y = data.object3D.rotation.y - angle;
        }, 100); 
	
	*/	
	 
  
  }


  function rotEl(el) {
    var angle = 0;
 	 setTimeout(function (){ 
  		if(angle < 360) {
			angle++;
		} else { 
			angle = 0
		}
  	
           	el.object3D.rotation.y = el.object3D.rotation.y - angle;
        }, 100);    
  }
</script>

 
